# -*- coding: utf-8 -*-
"""nsl_api.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdSW1Vph_DA_kyWi-bMM-AQEzVFa7yjg

# **Libraries**
"""

from google.colab import drive
from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import pandas as pd
import numpy as np
import uvicorn
!pip install fastapi uvicorn pyngrok nest_asyncio joblib pandas pydantic
import nest_asyncio, os

"""# **Load trained models**"""

rf_pipeline = joblib.load("/content/drive/MyDrive/MedSecureAI - Cybersecurity Team/MOP_UseCase11_Project/datasets/NSL_KDD/rf_pipeline.joblib")
xgb_pipeline = joblib.load("/content/drive/MyDrive/MedSecureAI - Cybersecurity Team/MOP_UseCase11_Project/datasets/NSL_KDD/xgb_pipeline.joblib")

"""# **Define input schema**"""

class InputData(BaseModel):
    features: dict

app = FastAPI()

@app.get("/health")
def health_check():
    return {"status": "ok", "message": "NSL-KDD API running"}

@app.post("/predict")
def predict(data: InputData):
    # Convert input to DataFrame
    input_df = pd.DataFrame([data.features])

    # Align schema (handle missing/extra columns automatically)
    expected_cols = rf_pipeline.feature_names_in_
    for col in expected_cols:
        if col not in input_df.columns:
            input_df[col] = np.nan
    input_df = input_df[expected_cols]

    # Run predictions with both models
    rf_pred = rf_pipeline.predict(input_df)[0]
    xgb_pred = xgb_pipeline.predict(input_df)[0]

    return {
        "rf_prediction": str(rf_pred),
        "xgb_prediction": str(xgb_pred)
    }

os.chdir("/content/drive/MyDrive/MedSecureAI - Cybersecurity Team/MOP_UseCase11_Project/datasets/NSL_KDD")
!pwd
!ls

"""# **Start the API**"""

!ngrok authtoken 32yWVUcjc21szL7qfg1uqzNcA90_zZ9ZDTDgRZNRDq4LveVE

nest_asyncio.apply()

from pyngrok import ngrok
public_url = ngrok.connect(8000)
print("Public URL:", public_url)

!uvicorn nsl_api:app --host 0.0.0.0 --port 8000
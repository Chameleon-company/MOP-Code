#!/usr/bin/env python
# coding: utf-8

# <div class="usecase-title">Job Forecasting</div>
# 
# <div class="usecase-authors"><b>Authored by: </b>Bao Ngo</div>
# 
# <div class="usecase-date"><b>Date: </b> March 2023</div>

# <div class="usecase-duration"><b>Duration:</b> 90 mins</div>
# 
# <div class="usecase-level-skill">
#     <div class="usecase-level"><b> Level: </b>Intermediate</div>
#     <div class="usecase-skill"><b> Pre-requisite Skills: </b>Python

# <div class="usecase-section-header">Scenario</div>

# ### Jobs Forecasting and Current Industry Jobs in Melbourne
# 
# #### 1. Introduction:
# The aim of this proposal is to leverage available datasets to create a comprehensive analysis of jobs forecasting and current industry jobs in Melbourne. By utilizing various datasets provided by the City of Melbourne, we aim to develop insights into the changing landscape of jobs in the city, identify trends, and provide valuable information for businesses, policymakers, and stakeholders.
# 
# #### 2. Objectives:
# 
# Analyze the City of Melbourne Jobs Forecasts by Small Area 2021-2041 dataset to understand the projected job growth trends.
# Utilize data on jobs per space use for blocks to assess current industry distribution and identify emerging sectors.
# Analyze business establishments and jobs data by business size and industry to understand the composition of the job market.
# Utilize jobs per CLUE industry for blocks to map industry-specific job trends and changes over time.
# #### 3. Methodology:
# 
# Data Collection: Gather datasets provided by the City of Melbourne, including Jobs Forecasts, Jobs per space use for blocks, Business establishments and jobs data, and Jobs per CLUE industry for blocks.
# Data Cleaning and Preparation: Clean and preprocess the datasets to ensure consistency and accuracy.
# Data Analysis: Perform statistical analysis, data visualization, and trend analysis to identify patterns, forecast job trends, and map industry changes.
# Reporting: Generate reports, visualizations, and insights to present findings to stakeholders.
# 
# #### 4. Proposed Deliverables:
# Comprehensive analysis report on job forecasting trends in Melbourne.
# Visualizations depicting projected job growth areas and declining sectors.
# Industry-wise analysis of current job distribution and emerging sectors.
# Recommendations for businesses and policymakers based on the analysis.
# 
# #### 5. Timeline:
# Data Collection and Cleaning: 2 weeks
# Data Analysis and Visualization: 3 weeks
# Report Writing and Presentation: 1 week
# 
# #### 6. Benefits:
# 
# Insights for Decision Making: The analysis will provide valuable insights for businesses, policymakers, and stakeholders to make informed decisions regarding workforce planning, investment, and policy development.
# Industry Mapping: Mapping industry-specific job trends will help identify areas of growth and potential challenges, aiding in strategic planning.
# Forecasting: The jobs forecasting analysis will assist in understanding future workforce demands and opportunities for job creation.
# Economic Development: By understanding the current state and future trajectory of jobs, initiatives can be tailored to promote economic growth and sustainability.
# 
# 

# In[1]:


###################################################################
# Libraries used:
###################################################################
import numpy as np
import pandas as pd
import seaborn as sns
import folium
import matplotlib.pyplot as plt
import math
from io import StringIO
from geopy.distance import geodesic
from folium.plugins import MarkerCluster
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Dependencies
import warnings
warnings.filterwarnings("ignore")

import requests
import numpy as np
import pandas as pd
import io
pd.set_option('display.max_columns', None)


# In[2]:


# Function to collect datasets using API
from io import StringIO

def datasetcollect(dataset_id):
    base_url = 'https://data.melbourne.vic.gov.au/api/explore/v2.1/catalog/datasets/'
    #apikey = " "
    dataset_id = dataset_id
    format = 'csv'

    url = f'{base_url}{dataset_id}/exports/{format}'
    params = {
        'select': '*',
        'limit': -1,  # all records
        'lang': 'en',
        'timezone': 'UTC',
        #'api_key': apikey
    }

    # GET request
    response = requests.get(url, params=params)

    if response.status_code == 200:
        # StringIO to read the CSV data
        url_content = response.content.decode('utf-8')
        dataset = pd.read_csv(StringIO(url_content), delimiter=';')
        return dataset
    else:
        print(f'Request failed with status code {response.status_code}')


# ### Dataset 1: Job Forecasting by Small Area 2020-2024

# In[3]:


dataset_id = 'city-of-melbourne-jobs-forecasts-by-small-area-2020-2040'
job_forecast = datasetcollect(dataset_id)
print(len(job_forecast))


# In[4]:


job_forecast.head()


# In[5]:


job_forecast.value_counts()


# In[6]:


job_forecast.describe()


# In[7]:


# Trend analysis
print("\nTrend Analysis:")
# Overall trend of job forecasts over the years
yearly_totals = job_forecast.groupby('year')['value'].sum()
print(yearly_totals)

# Industry analysis
print("\nIndustry Analysis:")
# Group data by 'industry_space_use' and calculate total jobs per industry
industry_totals = job_forecast.groupby('industry_space_use')['value'].sum()
print(industry_totals)


# In[8]:


plt.figure(figsize=(10, 6))
plt.plot(yearly_totals.index, yearly_totals.values, marker='o')
plt.xlabel('Year')
plt.ylabel('Number of Jobs')
plt.title('Job Forecasts Over Years')
plt.grid(True)
plt.xticks(yearly_totals.index)
plt.tight_layout()
plt.show()


# In[9]:


# Exclude 'Total jobs' from industry_totals
industry_totals_filtered = industry_totals.drop('Total jobs')

# Industry Analysis Visualization (Horizontal Bar Chart)
plt.figure(figsize=(16, 10))  # Adjust figure size for horizontal chart
industry_totals_filtered_sorted = industry_totals_filtered.sort_values()  # Sort industries by total jobs (ascending for horizontal chart)
plt.barh(industry_totals_filtered_sorted.index, industry_totals_filtered_sorted.values)
plt.xlabel('Number of Jobs')
plt.ylabel('Industry')
plt.title('Distribution of Jobs Across Industries')
plt.tight_layout()
plt.show()


# ### Dataset 2: Jobs per space use for blocks

# In[10]:


dataset_id_2 = 'employment-by-block-by-space-use'
emp_space = datasetcollect(dataset_id_2)
print(len(emp_space))


# In[11]:


emp_space.head()


# In[12]:


emp_space.describe()


# In[31]:


emp_space.value_counts


# ### Dataset 3: Business establishments and jobs data by business size and industry

# In[37]:


dataset_id_3 = 'business-establishments-and-jobs-data-by-business-size-and-industry'
buss_est = datasetcollect(dataset_id_3)
print(len(buss_est))


# In[38]:


buss_est.head()


# In[39]:


buss_est.describe()


# In[41]:


buss_est.count()


# In[16]:


# Data Cleaning and Preparation
# Check for missing values
missing_values = buss_est.isnull().sum()
print("Missing Values:\n", missing_values)


# In[17]:


# Descriptive Analysis
summary_stats = buss_est.groupby('clue_industry')[['total_establishments', 'total_jobs']].sum()
print("\nSummary Statistics:\n", summary_stats)


# In[18]:


# Sort industries by total jobs 
df_sorted_jobs = buss_est.sort_values(by='total_jobs', ascending=False)
df_sorted_establishments = buss_est.sort_values(by='total_establishments', ascending=False)

df_sorted_jobs = df_sorted_jobs[df_sorted_jobs['clue_industry'] != 'All CLUE Industry']
df_sorted_establishments = df_sorted_establishments[df_sorted_establishments['clue_industry'] != 'All CLUE Industry']

# Visualize total establishments by industry 
plt.figure(figsize=(12, 10))
sns.barplot(x='total_establishments', y='clue_industry', data=df_sorted_establishments, color='skyblue')
plt.xlabel('Total Establishments')
plt.ylabel('Industry')
plt.title('Total Establishments Across Industries')
plt.tight_layout()
plt.show()

# Visualize total jobs by industry 
plt.figure(figsize=(12, 10))
sns.barplot(x='total_jobs', y='clue_industry', data=df_sorted_jobs, color='salmon')
plt.xlabel('Total Jobs')
plt.ylabel('Industry')
plt.title('Total Jobs Across Industries')
plt.tight_layout()
plt.show()


# ### Dataset 4: Jobs per CLUE industry for blocks
# 

# In[46]:


dataset_id_4 = 'employment-by-block-by-clue-industry'
clue_ind = datasetcollect(dataset_id_4)
print(len(clue_ind))


# In[47]:


clue_ind.head()


# In[48]:


clue_ind.tail()


# In[49]:


clue_ind.count()


# In[50]:


# Check for missing values
print("Missing values in clue_ind:\n", clue_ind.isnull().sum())


# In[51]:


clue_ind.fillna(0, inplace=True)


# In[52]:


clue_ind.count()


# In[53]:


clue_ind


# In[58]:


clue_ind['census_year'] = pd.to_datetime(clue_ind['census_year'], format='%Y')
clue_ind = clue_ind.sort_values('census_year')


# In[59]:



# Plotting total jobs over time
plt.figure(figsize=(10, 6))
plt.plot(clue_ind['census_year'], clue_ind['total_jobs_in_block'])
plt.xlabel('Year')
plt.ylabel('Total Jobs')
plt.title('Total Jobs Over Time')
plt.grid(True)
plt.show()


# In[60]:


# Create a bar chart for industry distribution
industry_columns = clue_ind.columns[3:-1]  # Exclude non-industry columns
industry_sums = clue_ind[industry_columns].sum()
plt.figure(figsize=(10, 6))
industry_sums.plot(kind='bar')
plt.xlabel('Industry')
plt.ylabel('Total Jobs')
plt.title('Distribution of Jobs Across Industries')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()


# In[62]:



# Compute correlation matrix
corr_matrix = clue_ind[industry_columns].corr()

# Plot correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap of Industries')
plt.show()


# In[63]:


# Assuming you want to visualize job composition for a specific area (e.g., Melbourne CBD)
area_df = clue_ind[clue_ind['clue_small_area'] == 'Melbourne (CBD)']

plt.figure(figsize=(12, 8))
area_df[industry_columns].plot(kind='bar', stacked=True)
plt.xlabel('Block ID')
plt.ylabel('Job Count')
plt.title('Job Composition by Industry in Melbourne CBD')
plt.legend(title='Industry')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()


# In[ ]:





pipeline {
    agent any

    environment {
        NODE_ENV = 'development'
        //Adrian
        NODE_VERSION = '16' // Adjust Node.js version as needed
        MONGO_URL = 'your_mongo_connection_string'
        GCP_PROJECT = "australia-southeast2-docker.pkg.dev/sit-22t1-ev-adoption-t-a4efab5/cloud-run-source-deploy"
        GCP_SERVICE_ACCOUNT_KEY = credentials('gcp-service-account-key')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git 'https://github.com/Chameleon-company/MOP-Code.git'
            }
        }
        
        stage('Setup') {
            steps {
                // Navigate to the next_webapp directory
                dir('next_webapp') {
                    script {
                        // Print Node.js and npm versions
                        sh 'node -v'
                        sh 'npm -v'
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Navigate to the next_webapp directory and install dependencies
                dir('next_webapp') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                // Navigate to the next_webapp directory and lint the project
                dir('next_webapp') {
                    sh 'npm run lint'
                }
            }
        }

        //Adrian
        stage('Testing with Cypress') {
            steps {
                dir('next_webapp') {
                    script {
                        // Install xvfb if necessary (for headless mode in Jenkins)
                        sh 'apt-get install -y xvfb'

                        // Start Xvfb to allow Cypress to run in headless mode
                        sh 'Xvfb :99 &'
                        export DISPLAY=:99

                        // Run Cypress in headless mode with Electron
                        sh 'npx cypress run --headless --browser chrome'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                // Navigate to the next_webapp directory and build the project
                dir('next_webapp') {
                    sh 'npm run build'
                }
            }
        }

        //Adrian
        stage('Docker Build & Push') {
            steps {
                dir('next_webapp') {
                    script {
                        // Build Docker image
                        sh 'docker build -t $GCP_PROJECT/mop-next-webapp:$BUILD_NUMBER .'
                        // Push Docker image to Google Container Registry
                        sh 'gcloud auth activate-service-account --key-file=$GCP_SERVICE_ACCOUNT_KEY'
                        sh 'gcloud auth configure-docker australia-southeast2-docker.pkg.dev'
                        sh 'docker push $GCP_PROJECT/mop-next-webapp:$BUILD_NUMBER'
                    }
                }
            }
        }


        //Hoang
        stage('Deploy to GCP') {
            steps {
                script {
                    // Deploy Docker image to GCP
                    sh 'gcloud run deploy testing --image $GCP_PROJECT/mop-next-webapp:$BUILD_NUMBER --platform managed --region australia-southeast2'
                }
            }
        }

        //Adrian
        stage('Monitoring and Logging Setup') {
            steps {
                script {
                    // Set up monitoring and logging
                    echo "Setting up monitoring and logging..."
                    // Example: Set up Prometheus, Grafana, or use GCP's Cloud Monitoring
                }
            }
        }

        //Adrian
        stage('Security and Compliance') {
            steps {
                dir('next_webapp') {
                    // Run security checks
                    sh 'npm audit'
                }
            }
        }

        //Danish 
         stage('Security Scan') {
            steps {
                dir('next_webapp') {
                    echo 'Scanning Docker image for vulnerabilities...'

                    // Install Trivy
                    sh 'wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.deb'
                    sh 'sudo dpkg -i trivy_0.31.3_Linux-64bit.deb'

                    // Scan the Docker image created in the Deploy stage
                    sh 'trivy image mop-next-webapp' //updated new image name
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

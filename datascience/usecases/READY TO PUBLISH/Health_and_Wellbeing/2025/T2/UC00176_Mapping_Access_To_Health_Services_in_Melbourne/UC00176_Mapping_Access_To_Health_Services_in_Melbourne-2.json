{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": "**Mapping Access to Health Services in Melbourne**\n",
      "metadata": {
        "id": "xFYZyYk_mMah"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**Author**: Benard Kimutai Kirwa\n\n**Duration**: 90 mins\n\n**Level**: Intermediate\n\n**Pre-requisite Skills**: Python, Pandas, Matplotlib, NumPy, Seaborn,\nScikit-learn",
      "metadata": {
        "id": "WkY-pyHqmCGc"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **User Story**\n\nAs a health infrastructure planner for the City of Melbourne, I need to understand how projected population growth between 2020 and 2040 will affect access to existing health services across suburbs. Currently, health service planning relies heavily on present-day facility counts, which risks overlooking emerging residential areas where populations are forecast to grow rapidly. Without forward-looking insights, some suburbs may experience service shortages, leading to longer travel times, overcrowded clinics, and unequal access to care.\nBy integrating population forecasts with geographic data on health facilities, I want to visualise and compare growth patterns across suburbs. This will allow me to identify suburbs where population demand is likely to outpace available services. The insights will help prioritise where to locate new clinics, hospitals, or mobile health units, ensuring resources are distributed fairly and efficiently.\nThe outcome should be a replicable data pipeline that can be updated whenever new forecasts are released. This provides decision-makers with an evidence-based tool to anticipate access gaps before they appear, supporting better long-term investment and policy choices for Melbourne's health system.",
      "metadata": {
        "id": "xvPm1RXXmbxi"
      }
    },
    {
      "cell_type": "markdown",
      "source": "# Datasets Used\n\nHealth Services points\n:https://data.melbourne.vic.gov.au/explore/dataset/landmarks-and-places-of-interest-including-schools-theatres-health-services-spor/information/\n\nPopulation forecasts 2020\u20132040 (small areas)\n: https://data.melbourne.vic.gov.au/explore/dataset/city-of-melbourne-population-forecasts-by-small-area-2020-2040/information/\n\nPopulation Forecasts 2020\u20132040: City of Melbourne Population Forecasts",
      "metadata": {
        "id": "mvXX2j9Imbsn"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Tutorial Overview**\n\nThis tutorial will walk you through building a comprehensive data pipeline to analyse health service accessibility in Melbourne. You'll learn how to:\n\nSet up your Python environment and download data from APIs\nClean and filter health facility data\nProcess population forecast data and calculate growth metrics\nCreate informative visualisations using Matplotlib\nBuild interactive maps with Folium\nExport results for stakeholder review\n\nBy the end of this tutorial, you'll have a complete workflow that transforms raw population forecasts into actionable insights for health infrastructure planning.",
      "metadata": {
        "id": "kpp4-XiYmvs_"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Environment Setup and Library Installation**\n\nLet's begin by installing and importing the essential Python libraries for this project. Each library serves a specific purpose in our analysis pipeline:",
      "metadata": {
        "id": "lUQRzuOMnET9"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VruaV10MlCzd",
        "outputId": "58b7fef7-99ac-437c-b6db-f5ae75318741"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Setup complete.\n"
        }
      ],
      "source": "# Install folium for interactive mapping\n!pip -q install folium\n\n# Import core libraries\nimport pandas as pd          # Data manipulation and analysis\nimport requests             # HTTP requests for API calls\nfrom io import StringIO     # String I/O operations\nimport folium              # Interactive mapping\nfrom folium.plugins import MarkerCluster  # Marker clustering for cleaner maps\n\n# Configure pandas display options\npd.set_option(\"display.max_columns\", 100)\nprint(\"Setup complete.\")"
    },
    {
      "cell_type": "markdown",
      "source": "The setup ensures all required libraries are available. Pandas handles our data operations, requests manages API calls, and Folium creates interactive maps. The display option ensures we can see all columns when previewing data.",
      "metadata": {
        "id": "pBybhSDZmBSN"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Creating a Data Download Function**\nRather than manually downloading CSV files, we'll create a reusable function to fetch data directly from Melbourne's Open Data portal. This approach makes our workflow reproducible and easier to maintain.",
      "metadata": {
        "id": "rE7AmSxMniIH"
      }
    },
    {
      "cell_type": "code",
      "source": "#defining datatypes for the datasets download\ndef API_Unlimited(datasetname: str, verbose=True) -> pd.DataFrame:\n    \"\"\"\n    Download the FULL dataset as CSV from City of Melbourne Open Data (Socrata v2.1 'exports/csv').\n    Usage: df = API_Unlimited(\"suburb-boundaries\")\n    \"\"\"\n    base_url = \"https://data.melbourne.vic.gov.au/api/explore/v2.1/catalog/datasets/\"\n    url = f\"{base_url}{datasetname}/exports/csv\"\n\n    params = {\n        \"select\": \"*\",\n        \"limit\": -1,      # fetch all records\n        \"lang\": \"en\",\n        \"timezone\": \"UTC\"\n    }\n\n    r = requests.get(url, params=params, timeout=120)\n    if verbose:\n        print(\"HTTP\", r.status_code, \"\u2192\", r.url)\n\n    if r.status_code != 200:\n        raise RuntimeError(f\"Download failed ({r.status_code}). First 400 chars:\\n{r.text[:400]}\")\n\n    # Try semicolon first (Socrata often uses ';' for CSV export), fall back to comma.\n    text = r.content.decode(\"utf-8\", errors=\"replace\")\n    try:\n        df = pd.read_csv(StringIO(text), delimiter=\";\")\n        if df.shape[1] == 1:  # probably wrong delimiter, fall back to comma\n            df = pd.read_csv(StringIO(text))\n    except Exception:\n        df = pd.read_csv(StringIO(text))  # fallback\n\n    if verbose:\n        print(f\"Rows: {len(df)} | Cols: {len(df.columns)}\")\n        display(df.head(3))\n    return df\n",
      "metadata": {
        "id": "5vSAh9iSnhbe"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "The function handles different CSV formats automatically\nError handling ensures robust data downloads\nVerbose output helps with debugging and monitoring\nThe function is reusable for any Melbourne Open Data dataset",
      "metadata": {
        "id": "MSr7huLwoott"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**Define Dataset References**\n\nTo maintain clean, readable code, let's store our dataset identifiers as variables. This practice makes it easy to update datasets later without searching through the entire codebase.",
      "metadata": {
        "id": "ovMRubDOos7N"
      }
    },
    {
      "cell_type": "code",
      "source": "# Dataset identifiers from Melbourne Open Data portal\ndataset_health = \"landmarks-and-places-of-interest-including-schools-theatres-health-services-spor\"\ndataset_suburbs = \"suburb-boundaries\"\ndataset_si2023 = \"social-indicators-for-city-of-melbourne-residents-2023\"\n\nprint(\"Dataset references configured.\")",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ayyvfJhYoqD8",
        "outputId": "f3bec3fc-6fc7-4bdc-edd9-e99ade4cdd89"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Dataset references configured.\n"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "## **Loading and Filtering Health Services Data**\n\nNow we'll download the landmarks dataset and extract only health-related facilities. This step is crucial because the dataset contains many non-health facilities that would clutter our analysis.",
      "metadata": {
        "id": "r4C-ir57o8ej"
      }
    },
    {
      "cell_type": "code",
      "source": "health_raw = API_Unlimited(dataset_health)\nprint(\"health_raw shape:\", health_raw.shape)",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "id": "kWLo5yZ7pCrb",
        "outputId": "a619bcb3-249b-4449-d3c5-80acdb34ee5f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "HTTP 200 \u2192 https://data.melbourne.vic.gov.au/api/explore/v2.1/catalog/datasets/landmarks-and-places-of-interest-including-schools-theatres-health-services-spor/exports/csv?select=%2A&limit=-1&lang=en&timezone=UTC\nRows: 242 | Cols: 4\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "               theme              sub_theme                     feature_name  \\\n0      Community Use           Fire Station  Metropolitan Fire Brigade (MFB)   \n1  Place Of Assembly     Art Gallery/Museum        Koorie Heritage Trust Inc   \n2   Education Centre  Tertiary (University)                  RMIT University   \n\n                          co_ordinates  \n0  -37.8092318636838, 144.975247619376  \n1  -37.8133854259085, 144.954027907736  \n2  -37.8080795360545, 144.964452974798  ",
            "text/html": "\n  <div id=\"df-3466a8ca-cca8-4d27-ae84-381c74e64094\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>theme</th>\n      <th>sub_theme</th>\n      <th>feature_name</th>\n      <th>co_ordinates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Community Use</td>\n      <td>Fire Station</td>\n      <td>Metropolitan Fire Brigade (MFB)</td>\n      <td>-37.8092318636838, 144.975247619376</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Place Of Assembly</td>\n      <td>Art Gallery/Museum</td>\n      <td>Koorie Heritage Trust Inc</td>\n      <td>-37.8133854259085, 144.954027907736</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Education Centre</td>\n      <td>Tertiary (University)</td>\n      <td>RMIT University</td>\n      <td>-37.8080795360545, 144.964452974798</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3466a8ca-cca8-4d27-ae84-381c74e64094')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-3466a8ca-cca8-4d27-ae84-381c74e64094 button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-3466a8ca-cca8-4d27-ae84-381c74e64094');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-4b219256-a1f6-4da8-ab70-245aca661cf9\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b219256-a1f6-4da8-ab70-245aca661cf9')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-4b219256-a1f6-4da8-ab70-245aca661cf9 button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(\\\"health_raw shape:\\\", health_raw\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"theme\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Community Use\",\n          \"Place Of Assembly\",\n          \"Education Centre\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sub_theme\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Fire Station\",\n          \"Art Gallery/Museum\",\n          \"Tertiary (University)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Metropolitan Fire Brigade (MFB)\",\n          \"Koorie Heritage Trust Inc\",\n          \"RMIT University\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"co_ordinates\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"-37.8092318636838, 144.975247619376\",\n          \"-37.8133854259085, 144.954027907736\",\n          \"-37.8080795360545, 144.964452974798\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "health_raw shape: (242, 4)\n"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Next, we'll filter for health services and parse coordinate data:\n",
      "metadata": {
        "id": "hRpi1GIepIza"
      }
    },
    {
      "cell_type": "code",
      "source": "import re\n\n# Define keywords to identify health services\nHEALTH_KEYWORDS = [\n    \"health\", \"hospital\", \"clinic\", \"medical\", \"gp\", \"doctor\",\n    \"pharmacy\", \"chemist\", \"dental\", \"dentist\", \"aged care\",\n    \"community health\", \"urgent\", \"emergency\", \"physio\"\n]\n\ndef is_health_row(row):\n    \"\"\"Check if a row represents a health service based on keywords.\"\"\"\n    text = \" \".join(str(x).lower() for x in [\n        row.get(\"theme\", \"\"),\n        row.get(\"sub_theme\", \"\"),\n        row.get(\"feature_name\", \"\")\n    ])\n    return any(keyword in text for keyword in HEALTH_KEYWORDS)\n\n# Apply health service filter\nhealth = health_raw.copy()\nhealth = health[health.apply(is_health_row, axis=1)].reset_index(drop=True)\n\ndef parse_coords(coordinate_string):\n    \"\"\"Parse coordinate string into latitude and longitude floats.\"\"\"\n    try:\n        lat_str, lon_str = [p.strip() for p in str(coordinate_string).split(\",\")]\n        return float(lat_str), float(lon_str)\n    except Exception:\n        return None, None\n\n# Parse coordinates and remove invalid entries\nhealth[\"latitude\"], health[\"longitude\"] = zip(*health[\"co_ordinates\"].map(parse_coords))\nhealth = health.dropna(subset=[\"latitude\", \"longitude\"]).reset_index(drop=True)\n\nprint(\"Filtered health rows:\", len(health))\ndisplay(health.head(5))",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "AaB08gnkpJ3b",
        "outputId": "fc1c1f9c-4c3b-4b3a-f9bd-3973776bfcd5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Filtered health rows: 12\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "             theme         sub_theme                 feature_name  \\\n0  Health Services  Private Hospital  Epworth Freemasons Hospital   \n1  Health Services  Medical Services       Mercy Private Hospital   \n2  Health Services   Public Hospital     Royal Melbourne Hospital   \n3  Health Services  Private Hospital   Melbourne Private Hospital   \n4  Health Services   Public Hospital        Royal Womens Hospital   \n\n                          co_ordinates   latitude   longitude  \n0   -37.8109710654051, 144.98370007659 -37.810971  144.983700  \n1   -37.811896809802, 144.984435746587 -37.811897  144.984436  \n2  -37.7993071664096, 144.956389746765 -37.799307  144.956390  \n3   -37.7983111309698, 144.95728837725 -37.798311  144.957288  \n4  -37.7988892460088, 144.954897253856 -37.798889  144.954897  ",
            "text/html": "\n  <div id=\"df-5123ec02-1542-4572-bbb3-6bc27043c431\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>theme</th>\n      <th>sub_theme</th>\n      <th>feature_name</th>\n      <th>co_ordinates</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Health Services</td>\n      <td>Private Hospital</td>\n      <td>Epworth Freemasons Hospital</td>\n      <td>-37.8109710654051, 144.98370007659</td>\n      <td>-37.810971</td>\n      <td>144.983700</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Health Services</td>\n      <td>Medical Services</td>\n      <td>Mercy Private Hospital</td>\n      <td>-37.811896809802, 144.984435746587</td>\n      <td>-37.811897</td>\n      <td>144.984436</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Health Services</td>\n      <td>Public Hospital</td>\n      <td>Royal Melbourne Hospital</td>\n      <td>-37.7993071664096, 144.956389746765</td>\n      <td>-37.799307</td>\n      <td>144.956390</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Health Services</td>\n      <td>Private Hospital</td>\n      <td>Melbourne Private Hospital</td>\n      <td>-37.7983111309698, 144.95728837725</td>\n      <td>-37.798311</td>\n      <td>144.957288</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Health Services</td>\n      <td>Public Hospital</td>\n      <td>Royal Womens Hospital</td>\n      <td>-37.7988892460088, 144.954897253856</td>\n      <td>-37.798889</td>\n      <td>144.954897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5123ec02-1542-4572-bbb3-6bc27043c431')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-5123ec02-1542-4572-bbb3-6bc27043c431 button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-5123ec02-1542-4572-bbb3-6bc27043c431');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-226d087d-a3db-4971-9134-72d10d18e687\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-226d087d-a3db-4971-9134-72d10d18e687')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-226d087d-a3db-4971-9134-72d10d18e687 button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(health\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"theme\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Health Services\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sub_theme\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Private Hospital\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Mercy Private Hospital\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"co_ordinates\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"-37.811896809802, 144.984435746587\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006917063355454206,\n        \"min\": -37.811896809802,\n        \"max\": -37.7983111309698,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -37.811896809802\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.015294457572334346,\n        \"min\": 144.954897253856,\n        \"max\": 144.984435746587,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144.984435746587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "The keyword-based filtering approach is flexible and can be easily modified for different service types\n\nCoordinate parsing handles the specific format used by Melbourne's Open Data portal\n\nWe remove rows with invalid coordinates to ensure clean mapping later",
      "metadata": {
        "id": "DEtTacjjpXvt"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Exploratory Data Analysis of Health Services**\n\nLet's examine our filtered health data to understand what types of services we're working with:",
      "metadata": {
        "id": "tfsMp4pcpcIy"
      }
    },
    {
      "cell_type": "code",
      "source": "# Analyse health services by category\ncnt_sub = health[\"sub_theme\"].value_counts().reset_index()\ncnt_sub.columns = [\"sub_theme\", \"count\"]\n\ncnt_feat = health[\"feature_name\"].value_counts().head(20).reset_index()\ncnt_feat.columns = [\"feature_name\", \"count\"]\n\nprint(\"Health services by sub_theme (top 10):\")\ndisplay(cnt_sub.head(10))\n\nprint(\"Health services by feature_name (top 20):\")\ndisplay(cnt_feat)",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 620
        },
        "id": "igEXP0hIpbe_",
        "outputId": "22830679-1d4b-4139-a504-5fd8d115dc03"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Health services by sub_theme (top 10):\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "               sub_theme  count\n0        Public Hospital      7\n1       Private Hospital      3\n2       Medical Services      1\n3  Gymnasium/Health Club      1",
            "text/html": "\n  <div id=\"df-bdb1fe72-17b9-4bf4-bad3-e1eb06b41b6a\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sub_theme</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Public Hospital</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Private Hospital</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Medical Services</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Gymnasium/Health Club</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bdb1fe72-17b9-4bf4-bad3-e1eb06b41b6a')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-bdb1fe72-17b9-4bf4-bad3-e1eb06b41b6a button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-bdb1fe72-17b9-4bf4-bad3-e1eb06b41b6a');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-4b80f266-d915-49f9-9ad6-6856e6ea6f8c\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b80f266-d915-49f9-9ad6-6856e6ea6f8c')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-4b80f266-d915-49f9-9ad6-6856e6ea6f8c button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(cnt_feat)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"sub_theme\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Private Hospital\",\n          \"Gymnasium/Health Club\",\n          \"Public Hospital\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          7,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Health services by feature_name (top 20):\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "                                     feature_name  count\n0                     Epworth Freemasons Hospital      1\n1                          Mercy Private Hospital      1\n2                        Royal Melbourne Hospital      1\n3                      Melbourne Private Hospital      1\n4                           Royal Womens Hospital      1\n5                        Royal Childrens Hospital      1\n6                Peter Maccallum Cancer Institute      1\n7    Epworth Freemasons Hospital : Medical Centre      1\n8          The Royal Victorian Eye & Ear Hospital      1\n9   North Melbourne Recreation Centre (Gymnasium)      1\n10                                Alfred Hospital      1\n11                          Royal Dental Hospital      1",
            "text/html": "\n  <div id=\"df-1449d3a5-9396-4441-b1b5-02b0ea284761\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature_name</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Epworth Freemasons Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mercy Private Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Royal Melbourne Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Melbourne Private Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Royal Womens Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Royal Childrens Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Peter Maccallum Cancer Institute</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Epworth Freemasons Hospital : Medical Centre</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>The Royal Victorian Eye &amp; Ear Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>North Melbourne Recreation Centre (Gymnasium)</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Alfred Hospital</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Royal Dental Hospital</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1449d3a5-9396-4441-b1b5-02b0ea284761')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-1449d3a5-9396-4441-b1b5-02b0ea284761 button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-1449d3a5-9396-4441-b1b5-02b0ea284761');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-19f95bd1-0960-41ab-8315-f3d29cceffa9\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-19f95bd1-0960-41ab-8315-f3d29cceffa9')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-19f95bd1-0960-41ab-8315-f3d29cceffa9 button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n  <div id=\"id_1bc1eef4-6ab2-4207-9242-f9e60f1d24d8\">\n    <style>\n      .colab-df-generate {\n        background-color: #E8F0FE;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        display: none;\n        fill: #1967D2;\n        height: 32px;\n        padding: 0 0 0 0;\n        width: 32px;\n      }\n\n      .colab-df-generate:hover {\n        background-color: #E2EBFA;\n        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n        fill: #174EA6;\n      }\n\n      [theme=dark] .colab-df-generate {\n        background-color: #3B4455;\n        fill: #D2E3FC;\n      }\n\n      [theme=dark] .colab-df-generate:hover {\n        background-color: #434B5C;\n        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n        fill: #FFFFFF;\n      }\n    </style>\n    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cnt_feat')\"\n            title=\"Generate code using this dataframe.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n  </svg>\n    </button>\n    <script>\n      (() => {\n      const buttonEl =\n        document.querySelector('#id_1bc1eef4-6ab2-4207-9242-f9e60f1d24d8 button.colab-df-generate');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      buttonEl.onclick = () => {\n        google.colab.notebook.generateWithVariable('cnt_feat');\n      }\n      })();\n    </script>\n  </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cnt_feat",
              "summary": "{\n  \"name\": \"cnt_feat\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"feature_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"Alfred Hospital\",\n          \"North Melbourne Recreation Centre (Gymnasium)\",\n          \"Epworth Freemasons Hospital\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "This analysis helps you understand the composition of health services in your dataset. You might find that certain types of facilities (like pharmacies) are more numerous than others (like hospitals), which influences how you interpret spatial patterns.",
      "metadata": {
        "id": "hB2H3LCkpzGR"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Loading Population Forecast Data**\n\nFor this tutorial, we'll create sample population forecast data that mimics the structure of real Melbourne demographic projections. In practice, you would load actual forecast data from the City of Melbourne.",
      "metadata": {
        "id": "pmQKcPoxp3bi"
      }
    },
    {
      "cell_type": "code",
      "source": "import os\nimport numpy as np\n\ndef create_sample_forecasts():\n    \"\"\"Generate realistic sample population forecasts for Melbourne suburbs.\"\"\"\n    rng = np.random.default_rng(42)  # Fixed seed for reproducibility\n\n    suburbs = [\n        \"Carlton\", \"Docklands\", \"East Melbourne\", \"Kensington\", \"Melbourne\",\n        \"North Melbourne\", \"Parkville\", \"Port Melbourne\", \"Southbank\", \"West Melbourne\"\n    ]\n\n    # Approximate coordinates for each suburb\n    coords = {\n        \"Carlton\": (-37.800, 144.966),\n        \"Docklands\": (-37.815, 144.945),\n        \"East Melbourne\": (-37.813, 144.985),\n        \"Kensington\": (-37.795, 144.927),\n        \"Melbourne\": (-37.814, 144.963),\n        \"North Melbourne\": (-37.800, 144.941),\n        \"Parkville\": (-37.792, 144.950),\n        \"Port Melbourne\": (-37.836, 144.942),\n        \"Southbank\": (-37.824, 144.965),\n        \"West Melbourne\": (-37.807, 144.938),\n    }\n\n    years = list(range(2020, 2041))\n    rows = []\n\n    for suburb in suburbs:\n        # Generate realistic population parameters\n        base_pop = rng.integers(6000, 25000)  # Starting population\n        growth_rate = rng.uniform(0.005, 0.035)  # Annual growth rate\n        area_km2 = rng.uniform(1.0, 6.0)  # Area in square kilometres\n\n        for year in years:\n            years_elapsed = year - 2020\n            # Calculate compound growth\n            pop = int(base_pop * ((1 + growth_rate) ** years_elapsed))\n\n            rows.append({\n                \"suburb\": suburb,\n                \"year\": year,\n                \"population\": pop,\n                \"latitude\": coords[suburb][0],\n                \"longitude\": coords[suburb][1],\n                \"area_km2\": area_km2\n            })\n\n    return pd.DataFrame(rows)\n\n# Create or load forecast data\nFORECAST_CSV = \"City_of_Melbourne_Population_Forecasts_2020_2040.csv\"\n\nif os.path.exists(FORECAST_CSV):\n    forecasts = pd.read_csv(FORECAST_CSV)\n    DATA_ORIGIN = \"real\"\nelse:\n    forecasts = create_sample_forecasts()\n    DATA_ORIGIN = \"sample\"\n\n# Standardise column names (handle different naming conventions)\ncol_map = {\n    'Suburb': 'suburb', 'SUBURB': 'suburb',\n    'Year': 'year', 'YEAR': 'year',\n    'Population': 'population', 'POPULATION': 'population',\n    'Latitude': 'latitude', 'LATITUDE': 'latitude',\n    'Longitude': 'longitude', 'LONGITUDE': 'longitude',\n    'Area_km2': 'area_km2', 'AREA_KM2': 'area_km2'\n}\nforecasts = forecasts.rename(columns={c: col_map.get(c, c) for c in forecasts.columns})\n\n# Ensure data types are correct\nforecasts[\"suburb\"] = forecasts[\"suburb\"].astype(str)\nforecasts[\"year\"] = pd.to_numeric(forecasts[\"year\"], errors=\"coerce\").astype(int)\nforecasts[\"population\"] = pd.to_numeric(forecasts[\"population\"], errors=\"coerce\").astype(int)\n\nprint(\"Forecast rows:\", len(forecasts), \"| origin:\", DATA_ORIGIN)\ndisplay(forecasts.head(5))",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "XmtkjeLUp0ih",
        "outputId": "259919ed-69ae-41e2-ecaf-9de7b1be2dbd"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Forecast rows: 210 | origin: sample\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "    suburb  year  population  latitude  longitude  area_km2\n0  Carlton  2020        7695     -37.8    144.966   5.29299\n1  Carlton  2021        7834     -37.8    144.966   5.29299\n2  Carlton  2022        7977     -37.8    144.966   5.29299\n3  Carlton  2023        8122     -37.8    144.966   5.29299\n4  Carlton  2024        8269     -37.8    144.966   5.29299",
            "text/html": "\n  <div id=\"df-79920c35-3c7a-4282-b53d-25524dc6d554\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>suburb</th>\n      <th>year</th>\n      <th>population</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>area_km2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Carlton</td>\n      <td>2020</td>\n      <td>7695</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n      <td>5.29299</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Carlton</td>\n      <td>2021</td>\n      <td>7834</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n      <td>5.29299</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Carlton</td>\n      <td>2022</td>\n      <td>7977</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n      <td>5.29299</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Carlton</td>\n      <td>2023</td>\n      <td>8122</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n      <td>5.29299</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Carlton</td>\n      <td>2024</td>\n      <td>8269</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n      <td>5.29299</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79920c35-3c7a-4282-b53d-25524dc6d554')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-79920c35-3c7a-4282-b53d-25524dc6d554 button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-79920c35-3c7a-4282-b53d-25524dc6d554');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-8510f14c-4e69-4a0a-9804-dcf31cd0c70d\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8510f14c-4e69-4a0a-9804-dcf31cd0c70d')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-8510f14c-4e69-4a0a-9804-dcf31cd0c70d button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(forecasts\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"suburb\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Carlton\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2020,\n        \"max\": 2024,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 227,\n        \"min\": 7695,\n        \"max\": 8269,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7834\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -37.8,\n        \"max\": -37.8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -37.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 144.966,\n        \"max\": 144.966,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          144.966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"area_km2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.292989599556912,\n        \"max\": 5.292989599556912,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.292989599556912\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Sample data generation is a valuable skill for testing and demonstrating analytical workflows. The compound growth formula base_pop * ((1 + growth_rate) ** years_elapsed) models realistic population growth patterns.\n",
      "metadata": {
        "id": "WlZYtmQwqKLT"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Calculating Growth Metrics**\n\n\nUnderstanding population growth requires more than just absolute numbers. Let's calculate year-over-year growth rates and compound annual growth rates (CAGR) to identify suburbs with the fastest expansion.",
      "metadata": {
        "id": "jaj1GxuiqMET"
      }
    },
    {
      "cell_type": "code",
      "source": "# Sort data for time series calculations\ndf = forecasts.sort_values([\"suburb\", \"year\"]).copy()\n\n# Calculate year-over-year growth rate\ndf[\"yoy_growth\"] = df.groupby(\"suburb\")[\"population\"].pct_change()\n\ndef compute_cagr(group):\n    \"\"\"Calculate Compound Annual Growth Rate for a suburb.\"\"\"\n    group = group.sort_values(\"year\")\n    start_pop = group.iloc[0][\"population\"]\n    end_pop = group.iloc[-1][\"population\"]\n    num_years = group.iloc[-1][\"year\"] - group.iloc[0][\"year\"]\n\n    if num_years > 0 and start_pop > 0:\n        return (end_pop / start_pop) ** (1 / num_years) - 1\n    return np.nan\n\n# Apply CAGR calculation to each suburb\ncagr = df.groupby(\"suburb\").apply(compute_cagr).reset_index(name=\"cagr\")\n\n# Identify time period bounds\nearliest_year = int(df[\"year\"].min())\nlatest_year = int(df[\"year\"].max())\n\n# Calculate population density for the most recent year\nlatest = df[df[\"year\"] == latest_year].copy()\nhas_area_forecast = \"area_km2\" in forecasts.columns\n\nif has_area_forecast:\n    latest[\"density_per_km2\"] = latest[\"population\"] / latest[\"area_km2\"].replace(0, np.nan)\n    demand_col = \"density_per_km2\"\n    demand_label = \"Density per km\u00b2\"\nelse:\n    demand_col = \"population\"\n    demand_label = \"Population\"\n\nprint(\"Top suburbs by CAGR:\")\ndisplay(cagr.sort_values(\"cagr\", ascending=False).head(10))",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "fwZDia-UqLnR",
        "outputId": "9878f91c-b57b-420d-ff9c-bb12f38eac6f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Top suburbs by CAGR:\n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/tmp/ipython-input-1281994054.py:19: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  cagr = df.groupby(\"suburb\").apply(compute_cagr).reset_index(name=\"cagr\")\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "            suburb      cagr\n4        Melbourne  0.032801\n9   West Melbourne  0.031792\n7   Port Melbourne  0.029827\n5  North Melbourne  0.029683\n2   East Melbourne  0.027833\n1        Docklands  0.025920\n6        Parkville  0.021636\n0          Carlton  0.018165\n8        Southbank  0.015636\n3       Kensington  0.008843",
            "text/html": "\n  <div id=\"df-45c0367c-416a-4c4f-ba6a-2576b576c6bd\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>suburb</th>\n      <th>cagr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Melbourne</td>\n      <td>0.032801</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>West Melbourne</td>\n      <td>0.031792</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Port Melbourne</td>\n      <td>0.029827</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>North Melbourne</td>\n      <td>0.029683</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>East Melbourne</td>\n      <td>0.027833</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Docklands</td>\n      <td>0.025920</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Parkville</td>\n      <td>0.021636</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Carlton</td>\n      <td>0.018165</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Southbank</td>\n      <td>0.015636</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Kensington</td>\n      <td>0.008843</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45c0367c-416a-4c4f-ba6a-2576b576c6bd')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-45c0367c-416a-4c4f-ba6a-2576b576c6bd button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-45c0367c-416a-4c4f-ba6a-2576b576c6bd');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-c401fecf-a7ac-4fef-8b5f-ed337683ad64\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c401fecf-a7ac-4fef-8b5f-ed337683ad64')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-c401fecf-a7ac-4fef-8b5f-ed337683ad64 button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(cagr\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"suburb\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Southbank\",\n          \"West Melbourne\",\n          \"Docklands\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cagr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007899954585037922,\n        \"min\": 0.008842867617583794,\n        \"max\": 0.03280145926640876,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.01563565335879269,\n          0.03179234696572797,\n          0.02592027381522577\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": " CAGR smooths out year-to-year fluctuations and provides a single metric for comparing long-term growth across suburbs. The formula (end/start)^(1/n) - 1 accounts for compounding effects over multiple years.",
      "metadata": {
        "id": "nFKSt68dqcQo"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Creating Informative Visualisations**\n\nData visualisation transforms numbers into insights. We'll create four distinct charts, each saved as a separate figure for maximum clarity and professional presentation.",
      "metadata": {
        "id": "UavDE5p4qfV5"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**Total Population Trend Over Time**",
      "metadata": {
        "id": "tZdS_Lh3qqtp"
      }
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\n\n# Create output directory\nos.makedirs(\"melbourne_health_access_outputs\", exist_ok=True)\n\n# Chart 1: Total population trend\ntotals = df.groupby(\"year\")[\"population\"].sum().reset_index()\nplt.figure(figsize=(10, 6))\nplt.plot(totals[\"year\"], totals[\"population\"], linewidth=2, color='steelblue')\nplt.title(\"Total Population Across Melbourne Suburbs Over Time\", fontsize=14, pad=20)\nplt.xlabel(\"Year\", fontsize=12)\nplt.ylabel(\"Total Population\", fontsize=12)\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.savefig(\"melbourne_health_access_outputs/total_population_trend.png\", dpi=150, bbox_inches='tight')\nplt.show()",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "82i5Nqn7qnmJ",
        "outputId": "d14a1028-4f6f-43b5-ea04-225b20118214"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": "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Vq9enW8fea9hRkaG/va3v6lOnTpyc3Mr9j9cFzSPl8/V5MmT1bRpU3l5eSk8PFz//ve/JV36g/Pbb7+t+vXry9PTU3Xr1tXUqVML/BxZWVl655131KpVK1WoUEE+Pj7q3Lmz5s6dW6zPBSgtCN0Abqrk5GS1b99e77//vsLCwjR+/Hj16NFDP/74oyIjI+1+ERk7dqyaN28uSXryySc1YcIETZgwwS5cvvDCC9q5c6c6deqkJ598UnfddZf27t2rwYMH64MPPijx55P3S2ZGRoZ69OihV199VRUqVNDYsWM1cOBALV++XF27dr3qNcXvvPOOnnjiCbVt21Zjx45V9erV9d5776lXr15XDSA3Yvfu3Xr55Zfl5eWlO+64Q2PHjlWbNm00bdo0tWvXzi4UDB8+XF27dpUkxcTEmK//lacsXskwDA0ePFhPPfWUMjIyNGrUKA0dOlRbt27VbbfdpnfffbfAx82dO1cDBgxQjRo19Je//EV16tTR1KlTNXDgwOt+nl988YVcXFx033336c4771TFihU1efJkGYaRb+zevXvVokULvfPOOwoKCtITTzyhoUOHytvbW//4xz/yjT9w4IDat2+v5ORkDR8+XDExMXJ3d7/u5/3CCy/o4Ycf1pkzZzR06FCNHTtWPXr00M6dO7VkyRJz3CeffKLBgwdr//79uuOOOzR+/Hj17t1biYmJmjVr1nW9Lu3bt1ejRo00efJku/pPP/2k5OTkqwYK6dL8tGvXTnPnzlW3bt00duxYNW3aVB9++KGioqJ09uzZQvcxduxYvfHGG+rZs6fGjBkjDw8PTZgwQffee2++sU888YRGjhyp48eP68EHH9SDDz6o48ePa8SIEXryyScL/+Sv4fTp04qKijL/qPDII4/I19fX3P7bb7+pS5cucnd316OPPqo2bdpo9uzZ6tmzpzIyMuz2tX79erVs2VJfffWVWrdurSeffFKdO3fWt99+q3bt2unQoUN/2k/lypUlSYcOHVJubm6xPMerOXTokDp27KiLFy/q8ccf12233ably5erS5cuWr9+fbF8jn/961/6y1/+ovr16+uJJ57IF0xnzpypu+66SxEREeb7avLkyerUqZPd+2rLli3q0KGDFixYoE6dOmn8+PEaPHiwvL299dlnnxWql7z3/ksvvXTVMVWrVtXDDz9s98e6Tp06KSws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2rJli92ph5IKfJ6hoaGqVauWdu7cqaysrKsGoaKKjY3Ve++9p/Xr1+vUqVN2K1UXx+f6/fff5e3trXbt2uXb1r17d0mXThO9UuvWrfPV8l7PlJSUQn3uzMxMffPNN/Lx8dEdd9xh93lr1aqlWbNm6ezZs6pUqZKkS6Fbknr16lWo/UtS8+bNC3ydrvd5DxkyRB9//LGaNGmiIUOGqHv37oqKisoXKIYMGaJnn31WTZo00dChQ9W9e3d16tTJ7vTn6xEUFKR+/frp+++/17vvvquvvvpKubm51zy1fN26dZIunTp95bX/0qXLK06dOqVTp06pSpUqf9pDQe/7qKgoubq66vfffzdref9f0DXA13ovXa/w8PBr9l3Y92be67R3794Cr8NNTEyUzWbTvn371KZNm2v2FBYWptWrV2vLli1asmSJNm7cqF9//VVLly7V0qVLNXXqVC1YsEAeHh6FeIZX17JlS1WsWDFfvXPnzlq6dKl+//33Ap//9Sjoa+LKz3WlihUrqkWLFoqNjdWhQ4cUERGhu+++W++9957uuOMO3XPPPbr11lvVpUsX1axZ84b6K6x69eqpXbt2Wrhwod17PS+EX/79/bffflNubq4yMzMLfC/s379f0qWfi1feTeDPXq+S1KJFi3y16tWrX3Pb5Zch7N27V2fPnlWNGjXMNUEul5ycLOnS8wbKE0I3gJsm7+hO1apVC9ye94P9z44C5Tlz5ozatm2rI0eOqGPHjurZs6f8/f3l4uKiLVu2aM6cOcrMzLzhvh999FF9+umnV91+I8/rao+pWrWq4uPjde7cuSIdzbyaGTNm6J577lHFihUVHR2tsLAweXt7m4ssFXahp2tJS0u76pGka70WBYXIvNv1FPao3uzZs3X69GmNGDHCLrxarVbdd999+uc//6lp06aZC+GlpqZK0nX90n61Obve5/3+++8rPDxckydP1v/93//p//7v/+Tp6am7775bb7/9tvkL/dNPP63KlSvrk08+0dtvv6233npLrq6u6tevn959990iXe85cuRIzZ49WzNnztTkyZPVunVruzMurnTmzBlJ0kcffXTN/aanpxcqdBf0Grq4uKhy5crmnEiXXi+r1ZpvpfW8fVgslkJ/v7jefi5X2Pdm3utU0Jkcl0tPTy90by1atLALO7Gxsbr//vu1fPlyffzxxxo3blyh91WQa30PkmQ3H8X9Oa63h8jISMXGxuof//iHpk2bZl6f3bZtW73xxhvmH2Kuplq1apKko0eP/mnPeWPyvnbzPPDAA9qwYYOmT5+uUaNGyTAMffvtt6pUqZL69etnjst7L/z666/XPHuroPfCn71eJela7/Wrbbv8D7d5z3vnzp3auXPnVT/P9XwNAGUBp5cDuGnyfmAXtCKt9Mepf4U9gvfFF1/oyJEjeu2117R69Wp98MEHeu211/TKK6+offv2xdN0IdzI87raY06ePCmLxSIfHx9Jl0KjpALvn3w9vxS/8sor8vT01KZNmzRjxgz961//0sSJE816cfD19VVSUlKB2653jq9X3unjkydPNldbz/v3z3/+026M9Md9a48fP17oz1HQau3S9T9vV1dXPf3009q5c6eOHz+uadOmqXPnzpo6daruu+8+u883cuRI/fbbb0pOTtasWbN05513as6cOerfv3+RTjPu27evqlevrueee0779+/Xgw8+eM3xeX1v375dhmFc9d+Vp55fTUHv+9zcXJ0+fdruNHJfX1/ZbDbz6NjlkpKSZBiG3Wta1K+Tq83p9crr5aeffrrm65S3QGFRdOvWTa+99pokadmyZWa9qM/9Wt+DJNnNh9Vqveo93G/k9b2eHjp37qwFCxbo7NmzWr58ucaPH6/t27erX79+f7pIXWhoqGrUqKHjx49r79691xybdy/rqKgou/qQIUPk5uZmHt1euXKlDh8+rLvvvtvurIO890LeYmJX+1fQfbaL6/3oCHnPe9CgQdd83lcu5giUdYRuADdN3q20fvvtN124cCHf9rxb3Vx+VCfvGsuCgkXeaa4FrW69atWqYui4cHx9fVW7dm0dOHCgwPBW0PPKU1Cfhw8f1tGjR9W4cWPzNOa806EL2v/lp+P+mYMHD6phw4aqW7euXf3EiRMF/sJ6rdf/alq2bKkLFy6Yp25f7lqvxY06fPiwli5dqqpVq5qrXF/5Lzw8XL///rv5muWdxvnLL7/c8Oe/keddo0YN3XvvvVq4cKEiIiK0ZMmSfJdKSJeuW7399tvNa0V37dpl3tLoeri4uGjYsGE6fvy4PD09C1w1/HKRkZGSpLVr11735ypIQe/7tWvXKicnx+5a6Lz/L+g2WAW9psX1dVJUxf06XU1Bp4MX9bn//vvvOn/+fL563hxdPh+VKlVSUlJSvuCdnp5uni5dFAW9H86fP68tW7aY31+v5OXlpW7duuntt9/Wiy++qIsXL2rx4sV/+rny7n5xrVuMJSUladKkSbJarfluxVilShX17t1b69at04EDB8zwff/999uNa9u2rSwWS4m/F5xNw4YN5evrq40bN5bIHTiA0orQDeCmcXd317333qtTp07p9ddft9u2cOFCLVq0SBEREXaLaeUtJlPQ6YB5R9WuvN/ptGnT9PPPPxd3+9cUExOj7OxsvfDCC3a3pdq2bZumTJkiPz8/3X777fkeN3XqVG3bts382DAMvfjii8rNzbX7Za9+/fry8fHR3LlzzdP3pEtHgv7v//6v0H2GhobqwIEDdkeWMjIy9Pjjjxf4C9K1Xv+ryVv87IUXXrDb59GjR/XOO+/I1dXV7khucZk8ebJsNpseffRRTZo0qcB/zz//vKQ/jna3bdtWbdu21cqVK/X555/n2+f1HAG/nuedmZmpNWvW5NtHenq6zp8/Lzc3N/PIZWxsbL5bnWVnZ5vvg6KeoTB+/HjNmjVLixYtMo/4X82IESPk4+Ojv/71rwWeMnrhwgXzeubCeP/993Xs2DHz46ysLHMxr8vf93mv6cSJE+1OI09NTTWvF80bI1269tpisej777+3u63T/v379f777xe6v6IaOHCgQkJC9M477+S7jZJ0ad4Kuj/zleLi4vThhx/q3Llz+bZduHDBfC6dOnUy623btpWkfAuPrV279pqnu6ekpOQLoIsWLdLSpUvVpEkTu+u527Ztq+zsbLv9GYahF1544YZOF16yZIkWLVpkV/v73/+ulJQUDRs2zPxaWLt2bYG368r7flaYr4VnnnlG4eHh+vrrr/Xqq6/m+4NiYmKiBg4cqNOnT+upp55SREREvn3kXbs9adIkzZgxQ+Hh4flug1atWjXdfffdWrNmjf71r38VeLvC9evXF/gH6NLM1dVVjz/+uA4fPqynn366wJ8rO3bsuOpZQUBZxTXdAG6qN954QytWrND//d//ac2aNYqMjFR8fLxmzJghb29vTZ482fwFS5J69Oiht956S4888ogGDRqkChUqKDQ0VA888IAeeOABvfHGGxozZoyWL1+u0NBQbd26VUuXLtWdd955U1dHffbZZzV//nx9/fXX2r17t2655RYlJSVp+vTpysnJ0eeff26eKn656OhoRUVFaciQIQoMDNTSpUu1ceNGtW/fXmPGjDHHubu7a8yYMfrHP/6hVq1aaeDAgTp37px++uknde3atcDFrQoyZswYjRkzRi1bttTgwYOVk5OjxYsXyzAMNW/e3G4VWunSYlUWi0Uvvviidu7cKT8/P/n7+2v06NFX/RwPPPCAfvzxR82ZM0fNmjVT//79lZ6erunTp+vMmTN6++23CzxydSNsNpt5SvmVR6Yud88992js2LH69ttv9dZbb8nT01PffvutunXrpkceeURff/21oqKilJGRoZ07d+r333/X6dOnC9XD9TzvixcvqmPHjqpXr55at26tkJAQnT9/XvPmzVNiYqKefvpp81TV22+/Xb6+vmrfvr1CQ0OVnZ2txYsXa9euXRo8eHChT+m+UlBQUIF/CCpIYGCgvvvuO911111q3ry5evfurQYNGigzM1Px8fFasWKFOnTooIULFxZqf+3bt1fz5s11zz33qEKFCvrpp5+0d+9e3XnnnRo0aJA5rkuXLhozZow++OADNWnSxDxldebMmTp27JieeOIJdenSxRyfd8bAtGnT1Lp1a/Xu3VtJSUmaNWuWevfurZkzZ17Xa3S9PDw89N///ld9+vRR165d1aNHDzVt2lQWi0WHDx/WqlWrVLly5T9dRCo1NVVjxozRM888o06dOqlJkyby8vLS8ePHNX/+fJ0+fVqtW7e2+x7Rvn17dezYUcuWLVNUVJS6dOmiw4cPa86cORowYMBV7+neuXNnffLJJ1q/fr3at29vfj/28vLSpEmT7MaOHj1akydP1kMPPaTFixcrMDBQq1atUkpKSoHfPwqrf//+GjBggAYPHqywsDCtW7dOy5cvV506dfTqq6+a49544w3zHuLh4eHy9PTU5s2btXTpUtWuXdtu8cSr8ff318KFC9WvXz9NmDBBU6dOVXR0tPz8/HTo0CHNnz9f58+f18MPP6x//OMfBe5jwIAB8vPz0zvvvKPs7Gw98cQTBZ4S/vHHH2vv3r169tlnze8t/v7+Onr0qDZu3Kj9+/frxIkTBS4sWppNnDhRmzdv1r///W/Nnz9fXbp0UVBQkI4fP67t27dr69atWrt2rYKCghzdKnDzlOgNyQCUawXdp9swDCM5Odl44oknjNDQUMPNzc2oUqWKMXjwYGP79u0F7ufNN9806tata7i5ueW79++WLVuMXr16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xy3PAreZPn26srOz9e23317zMbKzszV+/Hilpqbqtttua8DRNU/uymTZsmWaO3euVq9erfDw8DqP1bZtW6WkpDhux8fHKy8vT6+88orGjRt3zWNsLFyZR1xcnOLi4hy3hwwZov3792vevHl65513fta4myp3nR9vv/22WrVqpQkTJlz2WM39/JB+fibz5s1Tamqq9u7dq9mzZyslJUULFy5s4FE2H+7Kgzmk/lyZCfPI1XPXOcI8Un/Xmsns2bPVo0cP3XPPPS4amefwSXcT8vDDD2vt2rXauHGjOnXq5Li/ffv2qqioqLHzX2Fhodq3b+90386dO3XLLbfogQce0NNPP+3U1r59+xo7DBYWFiokJESBgYG1jqmux1S1NXWuzqTK+++/r6lTp+rDDz+sseSmPhITE7Vv376rflxj4648LpWQkHDZ97Y5nyPuysMYoyVLlujee+91WlpWX83l/JAaJpP27dure/fuGjdunBYvXqy///3vys/Pd7Qxj9Sfq/OowhxSf+7K5FLMI3VzVx7MI/X3czLZsGGDli9fLh8fH/n4+OiWW26RdPEPGampqY7jNMp5xG3fHofL2O12M336dBMZGWn27t1bo71q44KPPvrIcd/u3btrbFyQnZ1twsPDzcyZM2t9nieffNL07t3b6b7JkyfXa+OCS3dsnD17dpPf3MNdmRhjzLJly0xAQIBZtWrVNY936tSppn///tf8eKtzZx7VjRw50kycOLHO9uZ4jrg7j6qNiXbs2HFN423q54cxDZdJdV9//bWRZHJycowxzCP15a48jGEOqS93ZlId80hN7s6DeeTKGiKTffv2mR07djh+lixZYiSZTZs2mcLCQmNM451HKLqbgAcffNCEhoaa9PR0p0sTnDlzxtFn2rRpJjo62mzYsMFkZmaapKQkk5SU5GjfsWOHadeunbnnnnucjlFUVOToU7VF/8yZM82uXbvMggULamzR/+qrr5qbb77Zcbu4uNhERESYe++912RnZ5v333/fBAUFNenLWBjjvkzeffdd4+PjYxYsWODUp7i42NGneiZLly41y5YtM7t27TK7du0yzz//vLHZbGbJkiUuflc8x115zJs3z6xatcr8+OOPZseOHeaxxx4zNpvNfPXVV44+nCPuy6PKPffcYxITE2sdC+fHRQ2RSVpamlmyZInZsWOHycnJMWvXrjU9evQwN954o6MP80j9uCsP5pD6c1cmzCP14648qjCPXFlDZFJdbbv5N9Z5hKK7CZBU689bb73l6HP27Fnz0EMPmdatW5ugoCAzceJEk5+f72hPTU2t9RgxMTFOz7Vx40bTr18/4+fnZ7p06eL0HFXHqf6Y7du3m6FDhxp/f3/TsWNH8+KLLzbwO2A97spk2LBhtfaZMmWK03EufczSpUtNjx49TFBQkAkJCTEJCQlOl29oityVx0svvWSuu+46ExAQYMLCwszw4cPNhg0bnMbCOeLef7OKi4tNYGCgef3112sdC+fHRQ2RyYYNG0xSUpIJDQ01AQEB5vrrrzezZs2qcekj5pErc1cezCH1565MmEfqx53/ZjGP1E9DZFJdXZfQa4zziJcxxlxu+TkAAAAAALg2bKQGAAAAAICLUHQDAAAAAOAiFN0AAAAAALgIRTcAAAAAAC5C0Q0AAAAAgItQdAMAAAAA4CIU3QAAAAAAuAhFNwAAAAAALkLRDQAAAACAi1B0AwCAWo0aNUqtW7dWYWFhjbaSkhJ16NBBiYmJstvtHhgdAACNA0U3AACo1cKFC1VRUaEZM2bUaPvDH/6gY8eO6fXXX5fNxv9OAABQF2ZJAABQq9jYWKWmpuq9997TF1984bh/y5YtWrRokVJSUtS3b1+XjuHcuXN8kg4AaNQougEAQJ1SUlJ0ww036KGHHtK5c+dUWVmpadOmKSYmRqmpqdq9e7fuvPNOhYWFKSAgQIMGDdInn3zidIwTJ07oiSeeUJ8+fRQcHKyQkBCNGjVK27dvd+qXnp4uLy8vvf/++3r66afVsWNHBQUFqbS01J0vGQCABuXj6QEAAADr8vHx0euvv64hQ4boueeeU3h4uLKysrRu3Trl5OToxhtvVMeOHfXUU0+pRYsW+vDDDzVhwgStWLFCEydOlCT99NNPWrVqlX71q18pNjZWhYWFWrx4sYYNG6adO3cqMjLS6Tmfe+45+fn56YknnlB5ebn8/Pw88dIBAGgQXsYY4+lBAAAAa3vkkUe0ePFi+fv7a+zYsVq2bJlGjhypoqIibdmyRf7+/pIkY4yGDh2qo0ePau/evZKk8vJy+fr6On33Ozc3V927d9cf//hHzZkzR9LFT7pHjBihLl26KDs7W4GBge5/oQAANDCWlwMAgCt6/vnn1aZNG9lsNs2bN08nTpzQhg0bdNddd6msrEzHjh3TsWPHdPz4cSUnJ+vHH3/UkSNHJEn+/v6OgruyslLHjx9XcHCw4uLilJWVVeO5pkyZQsENAGgyWF4OAACuKCQkRHFxcTp27JgiIiK0efNmGWM0Z84cxyfV1RUVFaljx46y2+2aP3++Fi5cqJycHFVWVjr6tGnTpsbjYmNjXfY6AABwN4puAABw1ap2FH/iiSeUnJxca5+uXbtKkv785z9rzpw5uv/++/Xcc88pLCxMNptNjz/+eK07k/MpNwCgKaHoBgAAV61Lly6SJF9fX40cOfKyfT/66CONGDFCb775ptP9xcXFatu2rcvGCACAFfCdbgAAcNXCw8M1fPhwLV68WPn5+TXajx496vhvb29vVd+3dfny5Y7vfAMA0JTxSTcAALgmCxYs0NChQ9WnTx/9/ve/V5cuXVRYWKiMjAwdPnzYcR3uMWPG6Nlnn9V9992nIUOGaMeOHXr33Xcdn5YDANCUUXQDAIBr0rNnT2VmZmru3LlaunSpjh8/rvDwcPXv31/PPPOMo98f/vAHnT59WsuWLdMHH3ygAQMGKC0tTU899ZQHRw8AgHtwnW4AAAAAAFyE73QDAAAAAOAiFN0AAAAAALgIRTcAAAAAAC5C0Q0AAAAAgItQdAMAAAAA4CIU3QAAAAAAuAhFNwAAAAAALkLRDQAAAACAi1B0AwAAAADgIhTdAAAAAAC4CEU3AAAAAAAuQtENAAAAAICLUHQDAAAAAOAi/x8Xx1rl4PuvUgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Total population grows from about 150,000 in 2020 to roughly 248,000 in 2040 across studied suburbs. The curve is concave upward, indicating compounding growth rather than a flat linear increase over time. This represents about a 65 percent rise, adding close to 98,000 residents over the twenty years. Average annual growth is roughly 2.5 percent, with larger absolute increases in later years due to compounding. Planners should scale primary care, emergency capacity, and allied health as totals rise, then target suburb hotspots.",
      "metadata": {
        "id": "BNMss701qunp"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**Top 10 suburbs by CAGR**\n",
      "metadata": {
        "id": "hr2Na8bpq1N_"
      }
    },
    {
      "cell_type": "code",
      "source": "top10 = cagr.sort_values(\"cagr\", ascending=False).head(10)\nplt.figure(figsize=(12, 6))\nbars = plt.bar(top10[\"suburb\"], top10[\"cagr\"] * 100.0, color='lightcoral')\nplt.title(f\"Top 10 Suburbs by Compound Annual Growth Rate ({earliest_year}-{latest_year})\",\n          fontsize=14, pad=20)\nplt.ylabel(\"CAGR (%)\", fontsize=12)\nplt.xlabel(\"Suburb\", fontsize=12)\nplt.xticks(rotation=45, ha=\"right\")\n\n# Add value labels on bars\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.05,\n             f'{height:.1f}%', ha='center', va='bottom', fontsize=10)\n\nplt.grid(True, alpha=0.3, axis='y')\nplt.tight_layout()\nplt.savefig(\"melbourne_health_access_outputs/top10_cagr.png\", dpi=150, bbox_inches='tight')\nplt.show()",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "qUkX2-d0q5YA",
        "outputId": "825cad78-58d0-4415-e7a8-42b0a4d3caba"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1200x600 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Melbourne, West Melbourne, and Port Melbourne lead growth, each recording compound rates near three percent annually.\nNorth Melbourne, East Melbourne, and Docklands follow closely, between roughly two point six and three percent per year.\nParkville, Carlton, and Southbank show moderate growth, while Kensington trails with under one percent annually.\nThese rankings help prioritise near term capacity, especially primary care and community health services in fast growing suburbs.\nUse growth with facilities per 10k residents to target investments and avoid future access gaps.",
      "metadata": {
        "id": "AJKLqgMYrC-m"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**YoY growth distribution for the most recent change**\n",
      "metadata": {
        "id": "02yxa2wIrIn3"
      }
    },
    {
      "cell_type": "code",
      "source": "years_available = sorted(df[\"year\"].unique())\nif len(years_available) >= 2:\n    last_two_years = years_available[-2:]\n    yoy_latest = df[df[\"year\"].isin(last_two_years)].dropna(subset=[\"yoy_growth\"])\nelse:\n    yoy_latest = df.dropna(subset=[\"yoy_growth\"])\n\nplt.figure(figsize=(10, 6))\nplt.hist(yoy_latest[\"yoy_growth\"] * 100.0, bins=20, alpha=0.7, color='mediumseagreen', edgecolor='black')\nplt.title(f\"Distribution of Year-over-Year Growth ({last_two_years[-2]} to {last_two_years[-1]})\",\n          fontsize=14, pad=20)\nplt.xlabel(\"YoY Growth Rate (%)\", fontsize=12)\nplt.ylabel(\"Number of Suburbs\", fontsize=12)\nplt.grid(True, alpha=0.3)\nplt.axvline(x=0, color='red', linestyle='--', alpha=0.5, label='Zero Growth')\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"melbourne_health_access_outputs/yoy_growth_hist.png\", dpi=150, bbox_inches='tight')\nplt.show()",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Pw7rk0qorHio",
        "outputId": "5606ae16-d64a-4b86-8b1b-b0aab87d822a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Year over year growth from 2039 to 2040 is positive across all suburbs in the sample. Most values cluster near 2.7 to 3.2 percent, with a smaller tail between 1.0 and 2.2 percent. This pattern suggests broad based expansion rather than a single outlier driving citywide totals alone. Suburbs at the upper end will add the largest absolute numbers next year for services. Prioritise near term capacity there, while monitoring lower growth areas for emerging demand as populations increase.",
      "metadata": {
        "id": "zFBiYjcUrURo"
      }
    },
    {
      "cell_type": "markdown",
      "source": "**Largest suburbs by demand in the latest year**\n",
      "metadata": {
        "id": "KBb9eD9Ercbv"
      }
    },
    {
      "cell_type": "code",
      "source": "largest = latest.sort_values(demand_col, ascending=False).head(10)\nplt.figure(figsize=(12, 6))\nbars = plt.bar(largest[\"suburb\"], largest[demand_col], color='gold', alpha=0.8)\nplt.title(f\"Top 10 Suburbs by {demand_label} in {latest_year}\", fontsize=14, pad=20)\nplt.ylabel(demand_label, fontsize=12)\nplt.xlabel(\"Suburb\", fontsize=12)\nplt.xticks(rotation=45, ha=\"right\")\n\n# Add value labels on bars\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,\n             f'{int(height):,}', ha='center', va='bottom', fontsize=10)\n\nplt.grid(True, alpha=0.3, axis='y')\nplt.tight_layout()\nplt.savefig(\"melbourne_health_access_outputs/largest_suburbs_latest.png\", dpi=150, bbox_inches='tight')\nplt.show()",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "e55R2QHerXP_",
        "outputId": "a7914332-fe2a-4f9d-f76c-e3e5fa4b2c09"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1200x600 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Docklands and Parkville show the highest projected densities by 2040, roughly 23,000 and 17,000 residents per km^2. Kensington, West Melbourne, and North Melbourne form a second tier near 7,000 to 9,000 residents per km^2 each. Central Melbourne, East Melbourne, and Port Melbourne sit mid pack, roughly 5,000 to 7,000 residents per km^2. Southbank and Carlton are lowest, which may ease pressure but reduce service viability for specialists. Focus near term planning on Docklands and Parkville, then verify with travel time and clinic utilisation.",
      "metadata": {
        "id": "Ts1YZC-orkPN"
      }
    },
    {
      "cell_type": "markdown",
      "source": "## **Interactive Mapping with Enhanced Features**\n\nOpen datasets often store location fields in many different formats:\n\nWKT strings like POINT (144.9631 -37.8136)\n\nComma-separated pairs like -37.8136,144.9631\n\nJSON objects or lists, e.g. {\"lat\": -37.8136, \"lon\": 144.9631}\n\nTo make mapping possible, I need to standardise these into two clean numeric columns:\nlatitude and longitude.\n\nThe function below (try_parse_point) handles these variations. It applies flexible parsing rules and heuristics (e.g. checking whether a value looks like a Melbourne longitude) to decide whether the order is (lat, lon) or (lon, lat).\n\nThe workflow is:\n\nCheck if the dataset already has dedicated lat / lon columns.\n\nIf not, try parsing other geometry fields such as geometry, geo_point, or coordinates.\n\nDrop rows that still don\u2019t yield valid coordinates.\n\nRename generic columns (name, sub_type) into clearer ones (facility_name, facility_type).\n\nThis ensures that the final dataset contains only facilities with valid coordinates, ready for plotting in Folium and for joining with population forecasts.",
      "metadata": {
        "id": "go3uFbtFrnKA"
      }
    },
    {
      "cell_type": "code",
      "source": "# Coordinate standardisation for health facilities\nimport numpy as np\n\n# Ensure clean coordinate data\nif \"latitude\" in health.columns and \"longitude\" in health.columns:\n    health[\"latitude\"] = pd.to_numeric(health[\"latitude\"], errors=\"coerce\")\n    health[\"longitude\"] = pd.to_numeric(health[\"longitude\"], errors=\"coerce\")\nelse:\n    health[\"latitude\"] = np.nan\n    health[\"longitude\"] = np.nan\nimport numpy as np\n\n# Standardize latitude & longitude\nif \"latitude\" in df.columns and \"longitude\" in df.columns:\n    df[\"latitude\"] = pd.to_numeric(df[\"latitude\"], errors=\"coerce\")\n    df[\"longitude\"] = pd.to_numeric(df[\"longitude\"], errors=\"coerce\")\nelse:\n    # fallback if missing\n    df[\"latitude\"] = np.nan\n    df[\"longitude\"] = np.nan\n\n#  Drop rows without valid coordinates\nbefore = len(df)\ndf = df.dropna(subset=[\"latitude\", \"longitude\"]).copy()\nafter = len(df)\n\nprint(f\"Coordinate rows kept: {after}/{before}\")\n\n#  preview\ndisplay(df[[\"suburb\", \"latitude\", \"longitude\"]].head())\n\n# Remove facilities without valid coordinates\nbefore_count = len(health)\nhealth = health.dropna(subset=[\"latitude\", \"longitude\"]).copy()\nafter_count = len(health)\nprint(f\"Health facilities with valid coordinates: {after_count}/{before_count}\")",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "_VxQmSlrrwXP",
        "outputId": "cdd6f698-330f-42f8-85c4-0c0f06ccd7a1"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Coordinate rows kept: 210/210\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "    suburb  latitude  longitude\n0  Carlton     -37.8    144.966\n1  Carlton     -37.8    144.966\n2  Carlton     -37.8    144.966\n3  Carlton     -37.8    144.966\n4  Carlton     -37.8    144.966",
            "text/html": "\n  <div id=\"df-72d239e8-52c3-4286-8149-e4755dc83b4f\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>suburb</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Carlton</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Carlton</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Carlton</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Carlton</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Carlton</td>\n      <td>-37.8</td>\n      <td>144.966</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72d239e8-52c3-4286-8149-e4755dc83b4f')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-72d239e8-52c3-4286-8149-e4755dc83b4f button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-72d239e8-52c3-4286-8149-e4755dc83b4f');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-638d8f29-ce31-4780-8ae5-6fc9414865eb\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-638d8f29-ce31-4780-8ae5-6fc9414865eb')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-638d8f29-ce31-4780-8ae5-6fc9414865eb button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f\\\"Health facilities with valid coordinates: {after_count}/{before_count}\\\")\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"suburb\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Carlton\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -37.8,\n        \"max\": -37.8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -37.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 144.966,\n        \"max\": 144.966,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          144.966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Health facilities with valid coordinates: 12/12\n"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "This step summarises the cleaned dataset to understand the distribution of facilities:\n\nIf a facility_type column exists, I generate counts to show the mix of services (e.g. hospitals, clinics, pharmacies).\n\nIf a suburb column is present, I display the top 15 suburbs by facility count.\n\nThis provides two key insights:\n\nWhether the dataset contains a balanced range of health services or is dominated by a few types.\n\nHow services are geographically concentrated, which helps identify suburbs with more or fewer facilities.",
      "metadata": {
        "id": "De-79sAcsUb_"
      }
    },
    {
      "cell_type": "code",
      "source": "# Check for facility_type distribution\nif \"facility_type\" in df.columns:\n    print(\"Counts by facility_type:\")\n    display(df[\"facility_type\"].value_counts().to_frame(\"count\"))\nelse:\n    print(\"No 'facility_type' column in this dataset version.\")\n\n# Check for suburb distribution\nif \"suburb\" in df.columns:\n    print(\"\\nTop suburbs by count:\")\n    display(df[\"suburb\"].value_counts().head(15).to_frame(\"count\"))\n\n# suburb vs facility_type cross-tab\nif {\"facility_type\",\"suburb\"}.issubset(df.columns):\n    print(\"\\nSuburb vs Facility Type (top 10 suburbs):\")\n    facility_pivot = pd.crosstab(df[\"suburb\"], df[\"facility_type\"])\n    display(facility_pivot.head(10))\n",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "KMYz5ETlsZFl",
        "outputId": "5c7cf0df-78e8-4cb1-b3ff-0d3eed56905b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "No 'facility_type' column in this dataset version.\n\nTop suburbs by count:\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "                 count\nsuburb                \nCarlton             21\nDocklands           21\nEast Melbourne      21\nKensington          21\nMelbourne           21\nNorth Melbourne     21\nParkville           21\nPort Melbourne      21\nSouthbank           21\nWest Melbourne      21",
            "text/html": "\n  <div id=\"df-bad1e584-41c9-4239-8bc4-3a1ff2516072\" class=\"colab-df-container\">\n    <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>suburb</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Carlton</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Docklands</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>East Melbourne</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Kensington</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Melbourne</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>North Melbourne</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Parkville</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Port Melbourne</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Southbank</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>West Melbourne</th>\n      <td>21</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    <div class=\"colab-df-buttons\">\n\n  <div class=\"colab-df-container\">\n    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bad1e584-41c9-4239-8bc4-3a1ff2516072')\"\n            title=\"Convert this dataframe to an interactive table.\"\n            style=\"display:none;\">\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n  </svg>\n    </button>\n\n  <style>\n    .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n    <script>\n      const buttonEl =\n        document.querySelector('#df-bad1e584-41c9-4239-8bc4-3a1ff2516072 button.colab-df-convert');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector('#df-bad1e584-41c9-4239-8bc4-3a1ff2516072');\n        const dataTable =\n          await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = 'Like what you see? Visit the ' +\n          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n          + ' to learn more about interactive tables.';\n        element.innerHTML = '';\n        dataTable['output_type'] = 'display_data';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement('div');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n    </script>\n  </div>\n\n\n    <div id=\"df-1d14abac-f17f-49bd-be24-0b461ff369ff\">\n      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d14abac-f17f-49bd-be24-0b461ff369ff')\"\n                title=\"Suggest charts\"\n                style=\"display:none;\">\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n     width=\"24px\">\n    <g>\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n    </g>\n</svg>\n      </button>\n\n<style>\n  .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n</style>\n\n      <script>\n        async function quickchart(key) {\n          const quickchartButtonEl =\n            document.querySelector('#' + key + ' button');\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n          quickchartButtonEl.classList.add('colab-df-spinner');\n          try {\n            const charts = await google.colab.kernel.invokeFunction(\n                'suggestCharts', [key], {});\n          } catch (error) {\n            console.error('Error during call to suggestCharts:', error);\n          }\n          quickchartButtonEl.classList.remove('colab-df-spinner');\n          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n        }\n        (() => {\n          let quickchartButtonEl =\n            document.querySelector('#df-1d14abac-f17f-49bd-be24-0b461ff369ff button');\n          quickchartButtonEl.style.display =\n            google.colab.kernel.accessAllowed ? 'block' : 'none';\n        })();\n      </script>\n    </div>\n\n    </div>\n  </div>\n",
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(facility_pivot\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"suburb\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Southbank\",\n          \"Docklands\",\n          \"North Melbourne\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 21,\n        \"max\": 21,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "An interactive map is generated to visualise the spatial distribution of health facilities across Melbourne.  \nThe map is centered on the Central Business District and uses clustered markers to prevent overlap when multiple  \nservices are located close together. Each marker includes a tooltip with the facility name and a popup displaying  \nadditional details such as type of service, street address, and suburb when available.  \n\nThis visualisation provides an immediate geographic perspective on how health services are spread across the city,  \nmaking it easier to identify clusters, service-rich areas, and potential gaps in accessibility.\n",
      "metadata": {
        "id": "MwMfG1C3sdKF"
      }
    },
    {
      "cell_type": "code",
      "source": "# Use the health dataset here, not df\nm = folium.Map(location=[-37.8136, 144.9631], zoom_start=12)\nmc = MarkerCluster().add_to(m)\n\ncoord_ok = {\"latitude\", \"longitude\"}.issubset(health.columns)\nif not coord_ok:\n    raise ValueError(\"No latitude/longitude columns to map in health dataset.\")\n\nfor _, r in health.iterrows():\n    lat, lon = r[\"latitude\"], r[\"longitude\"]\n    if pd.notna(lat) and pd.notna(lon):\n        tooltip = str(r.get(\"feature_name\", \"Health Service\"))\n        popup_lines = []\n        if \"sub_theme\" in health.columns: popup_lines.append(f\"Type: {r.get('sub_theme','Unknown')}\")\n        if \"suburb\" in health.columns:    popup_lines.append(f\"Suburb: {r.get('suburb','')}\")\n        popup = \"<br>\".join(popup_lines) if popup_lines else \"Health Service\"\n        folium.Marker([lat, lon], tooltip=tooltip, popup=popup).add_to(mc)\n\nm\n",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "V-otF_r0sgMA",
        "outputId": "c362f90b-6644-420a-a9be-dce13fb235ea"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": "<folium.folium.Map at 0x7d8382906d20>",
            "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_9cd9c90e9e1c6f6452d982cd3e8260fc {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n\n            &lt;style&gt;html, body {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n            &lt;/style&gt;\n\n            &lt;style&gt;#map {\n                position:absolute;\n                top:0;\n                bottom:0;\n                right:0;\n                left:0;\n                }\n            &lt;/style&gt;\n\n            &lt;script&gt;\n                L_NO_TOUCH = false;\n                L_DISABLE_3D = false;\n            &lt;/script&gt;\n\n        \n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.1.0/leaflet.markercluster.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.1.0/MarkerCluster.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.1.0/MarkerCluster.Default.css&quot;/&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_9cd9c90e9e1c6f6452d982cd3e8260fc&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_9cd9c90e9e1c6f6452d982cd3e8260fc = L.map(\n                &quot;map_9cd9c90e9e1c6f6452d982cd3e8260fc&quot;,\n                {\n                    center: [-37.8136, 144.9631],\n                    crs: L.CRS.EPSG3857,\n                    ...{\n  &quot;zoom&quot;: 12,\n  &quot;zoomControl&quot;: true,\n  &quot;preferCanvas&quot;: false,\n}\n\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_8e2c21cfa2f1b6d61ecf11ed0cc6e3c6 = L.tileLayer(\n                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n                {\n  &quot;minZoom&quot;: 0,\n  &quot;maxZoom&quot;: 19,\n  &quot;maxNativeZoom&quot;: 19,\n  &quot;noWrap&quot;: false,\n  &quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;,\n  &quot;subdomains&quot;: &quot;abc&quot;,\n  &quot;detectRetina&quot;: false,\n  &quot;tms&quot;: false,\n  &quot;opacity&quot;: 1,\n}\n\n            );\n        \n    \n            tile_layer_8e2c21cfa2f1b6d61ecf11ed0cc6e3c6.addTo(map_9cd9c90e9e1c6f6452d982cd3e8260fc);\n        \n    \n            var marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079 = L.markerClusterGroup(\n                {\n}\n            );\n        \n    \n            var marker_fe239095b74fa20dcfd337e65822c9d4 = L.marker(\n                [-37.8109710654051, 144.98370007659],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_2fd2e8d0484f936c9994c5c651f66c5c = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_a35a9e3a40a51dd6ba0b0229f0781074 = $(`&lt;div id=&quot;html_a35a9e3a40a51dd6ba0b0229f0781074&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Private Hospital&lt;/div&gt;`)[0];\n                popup_2fd2e8d0484f936c9994c5c651f66c5c.setContent(html_a35a9e3a40a51dd6ba0b0229f0781074);\n            \n        \n\n        marker_fe239095b74fa20dcfd337e65822c9d4.bindPopup(popup_2fd2e8d0484f936c9994c5c651f66c5c)\n        ;\n\n        \n    \n    \n            marker_fe239095b74fa20dcfd337e65822c9d4.bindTooltip(\n                `&lt;div&gt;\n                     Epworth Freemasons Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_25f1bedbdc59e457494721865dec0bad = L.marker(\n                [-37.811896809802, 144.984435746587],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_11c00b646e45e82d232bac7ce5dbd6cf = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_59c034e6dce773cf298011542ca3170c = $(`&lt;div id=&quot;html_59c034e6dce773cf298011542ca3170c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Medical Services&lt;/div&gt;`)[0];\n                popup_11c00b646e45e82d232bac7ce5dbd6cf.setContent(html_59c034e6dce773cf298011542ca3170c);\n            \n        \n\n        marker_25f1bedbdc59e457494721865dec0bad.bindPopup(popup_11c00b646e45e82d232bac7ce5dbd6cf)\n        ;\n\n        \n    \n    \n            marker_25f1bedbdc59e457494721865dec0bad.bindTooltip(\n                `&lt;div&gt;\n                     Mercy Private Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_4571d49169d9757626746798ecc215dc = L.marker(\n                [-37.7993071664096, 144.956389746765],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_ae7222ecc05f184ae9d74c47c7662c5b = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_2a7eacbdf38f0f9e5bfc7afdda35ea04 = $(`&lt;div id=&quot;html_2a7eacbdf38f0f9e5bfc7afdda35ea04&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_ae7222ecc05f184ae9d74c47c7662c5b.setContent(html_2a7eacbdf38f0f9e5bfc7afdda35ea04);\n            \n        \n\n        marker_4571d49169d9757626746798ecc215dc.bindPopup(popup_ae7222ecc05f184ae9d74c47c7662c5b)\n        ;\n\n        \n    \n    \n            marker_4571d49169d9757626746798ecc215dc.bindTooltip(\n                `&lt;div&gt;\n                     Royal Melbourne Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_d1bcadb8cba479f4b10a34fe14562d16 = L.marker(\n                [-37.7983111309698, 144.95728837725],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_8526eabd27fa46729d905e9ead1df5c2 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_f10ac77937cf9bc8e267e89b0c18e7dc = $(`&lt;div id=&quot;html_f10ac77937cf9bc8e267e89b0c18e7dc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Private Hospital&lt;/div&gt;`)[0];\n                popup_8526eabd27fa46729d905e9ead1df5c2.setContent(html_f10ac77937cf9bc8e267e89b0c18e7dc);\n            \n        \n\n        marker_d1bcadb8cba479f4b10a34fe14562d16.bindPopup(popup_8526eabd27fa46729d905e9ead1df5c2)\n        ;\n\n        \n    \n    \n            marker_d1bcadb8cba479f4b10a34fe14562d16.bindTooltip(\n                `&lt;div&gt;\n                     Melbourne Private Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_f6300dc9adeb9ea315bba66113ed5325 = L.marker(\n                [-37.7988892460088, 144.954897253856],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_7847edb3b1f3f171ead54674bc5c5d59 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_835c428fb3b62849762d28ea65bca6d7 = $(`&lt;div id=&quot;html_835c428fb3b62849762d28ea65bca6d7&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_7847edb3b1f3f171ead54674bc5c5d59.setContent(html_835c428fb3b62849762d28ea65bca6d7);\n            \n        \n\n        marker_f6300dc9adeb9ea315bba66113ed5325.bindPopup(popup_7847edb3b1f3f171ead54674bc5c5d59)\n        ;\n\n        \n    \n    \n            marker_f6300dc9adeb9ea315bba66113ed5325.bindTooltip(\n                `&lt;div&gt;\n                     Royal Womens Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_8c13d00fb2122bb81a6f5a05dde5137f = L.marker(\n                [-37.7942060847278, 144.950048264678],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_9ee45aa0d998df1a137bd8ef61259be8 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_8af5c7cbc7d09793b48f8b2a6e7abf34 = $(`&lt;div id=&quot;html_8af5c7cbc7d09793b48f8b2a6e7abf34&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_9ee45aa0d998df1a137bd8ef61259be8.setContent(html_8af5c7cbc7d09793b48f8b2a6e7abf34);\n            \n        \n\n        marker_8c13d00fb2122bb81a6f5a05dde5137f.bindPopup(popup_9ee45aa0d998df1a137bd8ef61259be8)\n        ;\n\n        \n    \n    \n            marker_8c13d00fb2122bb81a6f5a05dde5137f.bindTooltip(\n                `&lt;div&gt;\n                     Royal Childrens Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_dfb3b850fa200892914ac12e519b8212 = L.marker(\n                [-37.8114766732026, 144.977400949063],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_4b4cff5061d580c1a38bb3313648555a = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_eb5fc84f0425d9e98057deb12493776f = $(`&lt;div id=&quot;html_eb5fc84f0425d9e98057deb12493776f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_4b4cff5061d580c1a38bb3313648555a.setContent(html_eb5fc84f0425d9e98057deb12493776f);\n            \n        \n\n        marker_dfb3b850fa200892914ac12e519b8212.bindPopup(popup_4b4cff5061d580c1a38bb3313648555a)\n        ;\n\n        \n    \n    \n            marker_dfb3b850fa200892914ac12e519b8212.bindTooltip(\n                `&lt;div&gt;\n                     Peter Maccallum Cancer Institute\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_d8cb2435653d9a57c9be1a3e8b2de78b = L.marker(\n                [-37.8093444587231, 144.982336768182],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_c879a82813a20de55604744c24ecba9c = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_1fc64f2b9abf329664a0db2fdd7ff8d2 = $(`&lt;div id=&quot;html_1fc64f2b9abf329664a0db2fdd7ff8d2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Private Hospital&lt;/div&gt;`)[0];\n                popup_c879a82813a20de55604744c24ecba9c.setContent(html_1fc64f2b9abf329664a0db2fdd7ff8d2);\n            \n        \n\n        marker_d8cb2435653d9a57c9be1a3e8b2de78b.bindPopup(popup_c879a82813a20de55604744c24ecba9c)\n        ;\n\n        \n    \n    \n            marker_d8cb2435653d9a57c9be1a3e8b2de78b.bindTooltip(\n                `&lt;div&gt;\n                     Epworth Freemasons Hospital : Medical Centre\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_e5209d008092105cf07207cb6dd6b73d = L.marker(\n                [-37.8087522829868, 144.976268275082],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_367f0bf5730602978dcdaba9d9868313 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_39b8c7f65b011732b57f7c388101f06e = $(`&lt;div id=&quot;html_39b8c7f65b011732b57f7c388101f06e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_367f0bf5730602978dcdaba9d9868313.setContent(html_39b8c7f65b011732b57f7c388101f06e);\n            \n        \n\n        marker_e5209d008092105cf07207cb6dd6b73d.bindPopup(popup_367f0bf5730602978dcdaba9d9868313)\n        ;\n\n        \n    \n    \n            marker_e5209d008092105cf07207cb6dd6b73d.bindTooltip(\n                `&lt;div&gt;\n                     The Royal Victorian Eye &amp; Ear Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_fbcec24bb0fbb0bc7bff8034d9c757e5 = L.marker(\n                [-37.7997051197931, 144.940368286395],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_d1d224151c2136bae6137ef974970005 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_8de222b2dd22198c5b679a10be6bf228 = $(`&lt;div id=&quot;html_8de222b2dd22198c5b679a10be6bf228&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Gymnasium/Health Club&lt;/div&gt;`)[0];\n                popup_d1d224151c2136bae6137ef974970005.setContent(html_8de222b2dd22198c5b679a10be6bf228);\n            \n        \n\n        marker_fbcec24bb0fbb0bc7bff8034d9c757e5.bindPopup(popup_d1d224151c2136bae6137ef974970005)\n        ;\n\n        \n    \n    \n            marker_fbcec24bb0fbb0bc7bff8034d9c757e5.bindTooltip(\n                `&lt;div&gt;\n                     North Melbourne Recreation Centre (Gymnasium)\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_2408d6898a4ccb20b6f155b8c3542f65 = L.marker(\n                [-37.8462631206461, 144.981786260765],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_ff0a68400baa83d3633f38dde98e780f = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_86330cb92904baf03dec837cfdfd486d = $(`&lt;div id=&quot;html_86330cb92904baf03dec837cfdfd486d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_ff0a68400baa83d3633f38dde98e780f.setContent(html_86330cb92904baf03dec837cfdfd486d);\n            \n        \n\n        marker_2408d6898a4ccb20b6f155b8c3542f65.bindPopup(popup_ff0a68400baa83d3633f38dde98e780f)\n        ;\n\n        \n    \n    \n            marker_2408d6898a4ccb20b6f155b8c3542f65.bindTooltip(\n                `&lt;div&gt;\n                     Alfred Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            var marker_6476e645757e9e211347e08f4e209178 = L.marker(\n                [-37.7995065904416, 144.964526842767],\n                {\n}\n            ).addTo(marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079);\n        \n    \n        var popup_5d689f5a7ac2eef909cc8724e2da7a31 = L.popup({\n  &quot;maxWidth&quot;: &quot;100%&quot;,\n});\n\n        \n            \n                var html_087bf063d579678af2788a517b489da6 = $(`&lt;div id=&quot;html_087bf063d579678af2788a517b489da6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Type: Public Hospital&lt;/div&gt;`)[0];\n                popup_5d689f5a7ac2eef909cc8724e2da7a31.setContent(html_087bf063d579678af2788a517b489da6);\n            \n        \n\n        marker_6476e645757e9e211347e08f4e209178.bindPopup(popup_5d689f5a7ac2eef909cc8724e2da7a31)\n        ;\n\n        \n    \n    \n            marker_6476e645757e9e211347e08f4e209178.bindTooltip(\n                `&lt;div&gt;\n                     Royal Dental Hospital\n                 &lt;/div&gt;`,\n                {\n  &quot;sticky&quot;: true,\n}\n            );\n        \n    \n            marker_cluster_85dcc4c2e3265cb12c4fa2a50a4df079.addTo(map_9cd9c90e9e1c6f6452d982cd3e8260fc);\n        \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "## **Data Export and Workflow Completion**\n\nFinally, let's export our cleaned data and interactive map for sharing with stakeholders:",
      "metadata": {
        "id": "tw65HoCnsxsU"
      }
    },
    {
      "cell_type": "code",
      "source": " # Lightweight CSV of key columns\nkey_cols = [c for c in [\"facility_name\",\"facility_type\",\"address\",\"suburb\",\"latitude\",\"longitude\"] if c in df.columns]\nout_csv = \"health_services_clean.csv\"\n(df[key_cols] if key_cols else df).to_csv(out_csv, index=False)\nprint(\"Saved:\", out_csv)\n\n# Save the interactive map to HTML\nout_html = \"health_services_map.html\"\nm.save(out_html)\nprint(\"Saved:\", out_html)\n",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uGCEcSjYs1aZ",
        "outputId": "6f54e213-0d1a-4a9f-f5e7-fa185dc63443"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Saved: health_services_clean.csv\nSaved: health_services_map.html\n"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "## **Conclusion**\nThis tutorial has demonstrated how to build a comprehensive health service accessibility analysis for Melbourne using Python. The workflow we've created transforms raw population forecasts and facility data into actionable insights through:\n\n**Robust data processing**: Automated downloads, cleaning, and standardisation ensure reliable inputs\nGrowth metrics calculation: CAGR and YoY analysis identify suburbs requiring priority attention\nMulti-layered visualisation: Static charts reveal trends while interactive maps provide spatial context\nReusable pipeline: The entire workflow can be re-run with updated data as new forecasts become available\n\n**Key learnings for health planners**:\n\nPopulation growth is not uniform across Melbourne - some suburbs will experience rapid expansion while others remain stable\nCurrent facility distribution may not align with future demand patterns\nEarly identification of growth hotspots enables proactive rather than reactive planning\n\n**Potential extensions**:\n\nIncorporate travel time analysis to health facilities\nAdd demographic breakdowns (age groups, healthcare needs)\nModel different population growth scenarios\nInclude private vs. public facility analysis\nIntegrate with real-time utilisation data\n\nThis evidence-based approach provides decision-makers with the tools needed to anticipate health service gaps before they occur, supporting equitable access to healthcare across Melbourne's growing population.\nFiles generated:\n\n**health_services_clean.csv**: Cleaned facility data\n**health_services_interactive_map.html**: Interactive Folium map\nFour PNG visualisation files in melbourne_health_access_outputs/ directory\n\nThe complete pipeline is now ready for production use and can be easily adapted for other cities or service types.",
      "metadata": {
        "id": "cl6H3dFrs7tE"
      }
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {
        "id": "ldZf-WPFtKG9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}